commit 757de0d7cbe63bf17334e23075793d89492341ba
Author: Sopot Cela <scela@redhat.com>
Date:   Wed Mar 16 15:19:21 2016 +0100

    Guava and Lucene migration

diff --git a/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/server/json/Json.java b/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/server/json/Json.java
index 7ca739e..6768704 100644
--- a/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/server/json/Json.java
+++ b/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/server/json/Json.java
@@ -37,6 +37,7 @@ import com.google.common.collect.Lists;
 import com.google.common.io.Closeables;
 import com.google.common.io.Files;
 import com.google.common.io.InputSupplier;
+import com.google.common.io.ByteSource;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.reflect.TypeToken;
@@ -143,8 +144,8 @@ public class Json {
         List<T> res = Lists.newLinkedList();
         ZipInputStream zis = null;
         try {
-            InputSupplier<FileInputStream> fis = Files.newInputStreamSupplier(zip);
-            zis = new ZipInputStream(fis.getInput());
+            ByteSource fis = Files.asByteSource(zip);
+            zis = new ZipInputStream(fis.openStream());
             ZipEntry entry;
             while ((entry = zis.getNextEntry()) != null) {
                 if (!entry.isDirectory()) {
diff --git a/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/server/mars/Zips.java b/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/server/mars/Zips.java
index 259cf35..4d93323 100644
--- a/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/server/mars/Zips.java
+++ b/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/server/mars/Zips.java
@@ -9,7 +9,7 @@ package org.eclipse.epp.internal.logging.aeri.ide.server.mars;
 
 import static com.google.common.base.Optional.*;
 import static com.google.common.io.ByteStreams.toByteArray;
-import static com.google.common.io.Files.newInputStreamSupplier;
+import static com.google.common.io.Files.asByteSource;
 import static org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY;
 import static org.apache.commons.io.filefilter.FileFileFilter.FILE;
 import static org.apache.commons.lang3.StringUtils.removeStart;
@@ -33,6 +33,7 @@ import com.google.common.base.Throwables;
 import com.google.common.io.Closeables;
 import com.google.common.io.FileWriteMode;
 import com.google.common.io.Files;
+import com.google.common.io.ByteSink;
 import com.google.common.io.OutputSupplier;
 
 public class Zips {
@@ -90,8 +91,8 @@ public class Zips {
     public static void zip(File directory, File out) throws IOException {
         ZipOutputStream zos = null;
         try {
-            OutputSupplier<FileOutputStream> s = Files.newOutputStreamSupplier(out);
-            zos = new ZipOutputStream(s.getOutput());
+            ByteSink s = Files.asByteSink(out);
+            zos = new ZipOutputStream(s.openStream());
             for (File f : FileUtils.listFiles(directory, FILE, DIRECTORY)) {
                 String path = removeStart(f.getPath(), directory.getAbsolutePath() + File.separator);
                 path = path.replace(File.separatorChar, '/');
@@ -109,7 +110,7 @@ public class Zips {
      * Reads the give file into memory. This method may be used by zip based recommenders to speed up data access.
      */
     public static byte[] readFully(File file) throws IOException {
-        return toByteArray(newInputStreamSupplier(file));
+        return toByteArray(asByteSource(file).openStream());
     }
 
     /**
diff --git a/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/utils/Zips.java b/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/utils/Zips.java
index 729a880..5962382 100644
--- a/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/utils/Zips.java
+++ b/bundles/org.eclipse.epp.logging.aeri.ide/src/org/eclipse/epp/internal/logging/aeri/ide/utils/Zips.java
@@ -9,7 +9,7 @@ package org.eclipse.epp.internal.logging.aeri.ide.utils;
 
 import static com.google.common.base.Optional.*;
 import static com.google.common.io.ByteStreams.toByteArray;
-import static com.google.common.io.Files.newInputStreamSupplier;
+import static com.google.common.io.ByteSource.wrap;
 import static org.apache.commons.io.filefilter.DirectoryFileFilter.DIRECTORY;
 import static org.apache.commons.io.filefilter.FileFileFilter.FILE;
 import static org.apache.commons.lang3.StringUtils.removeStart;
@@ -33,6 +33,8 @@ import com.google.common.base.Throwables;
 import com.google.common.io.Closeables;
 import com.google.common.io.FileWriteMode;
 import com.google.common.io.Files;
+import com.google.common.io.ByteSource;
+import com.google.common.io.ByteSink;
 import com.google.common.io.OutputSupplier;
 
 public class Zips {
@@ -90,8 +92,8 @@ public class Zips {
     public static void zip(File directory, File out) throws IOException {
         ZipOutputStream zos = null;
         try {
-            OutputSupplier<FileOutputStream> s = Files.newOutputStreamSupplier(out);
-            zos = new ZipOutputStream(s.getOutput());
+            ByteSink s = Files.asByteSink(out);
+            zos = new ZipOutputStream(s.openStream());
             for (File f : FileUtils.listFiles(directory, FILE, DIRECTORY)) {
                 String path = removeStart(f.getPath(), directory.getAbsolutePath() + File.separator);
                 path = path.replace(File.separatorChar, '/');
@@ -109,7 +111,7 @@ public class Zips {
      * Reads the give file into memory. This method may be used by zip based recommenders to speed up data access.
      */
     public static byte[] readFully(File file) throws IOException {
-        return toByteArray(newInputStreamSupplier(file));
+        return toByteArray(Files.asByteSource(file).openStream());
     }
 
     /**
